Microsoft (R) Macro Assembler Version 6.15.8803		    11/06/18 18:17:13
interpolate.asm						     Page 1 - 1


				.386
				.MODEL FLAT

				;x_cordinate EQU [ebp + 16]
 = [ebp + 12]			degree 		EQU [ebp + 12]
 = [ebp + 8]			points_addr EQU [ebp + 8]

				PUBLIC interpolate

				INCLUDE debug.h
			      C INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
			      C 
 = 0000000D		      C CR          EQU    0Dh   ; carriage return character
 = 0000000A		      C LF          EQU    0Ah   ; linefeed character
			      C 
 00000000		      C .DATA
 00000000 0D 0A 00	      C carriage    BYTE     CR, LF, 0
 00000003  0000000D [	      C text        BYTE     13 DUP(?)
	    00
	   ]
			      C 
			      C outputW    	MACRO   var
			      C                    itoa text, var
			      C                    output text
			      C                    output carriage
			      C                 ENDM
			      C 
			      C outputD  	MACRO  var
			      C                    dtoa text, var
			      C                    output text
			      C                    output carriage
			      C          	ENDM
			      C 
			      C inputW          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 8
			      C                    atoi text
			      C                    mov location, ax
			      C                 ENDM
			      C 
			      C inputD          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 13
			      C                    atod text
			      C                    mov location, eax
			      C                 ENDM
			      C 
				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
				INCLUDE float.h
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE sort_points.h
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE compute_b_proc.h
			      C .NOLIST
			      C .LIST
			      C 

 00000010			.DATA

 00000010 00000000		float 		REAL4  ? ; used temporaryly
 00000014 00000000		x_cordinate REAL4  ? ; never changed
 00000018 3F800000		first REAL4  1.000	; never changed 
 0000001C 0000			m WORD 0	; never changed in here

 00000000			.CODE

 00000000			interpolate PROC NEAR32

 00000000  D9 1D 00000014 R		fstp REAL4 PTR x_cordinate

 00000006  55				push ebp
 00000007  8B EC			mov ebp , esp

					; initialize all registers here
 00000009  B8 00000000			mov eax , 0
 0000000E  BB 00000000			mov ebx , 0 
 00000013  B9 00000000			mov ecx , 0
 00000018  BA 00000000			mov edx , 0

 0000001D  8B 5D 08			mov ebx , points_addr
 00000020  66| B9 0000			mov cx , 0
 00000024  66| B9 0000			mov cx , 0
 00000028  66| BA 0000			mov dx , 0  	 ; m


 0000002C			for_b_0:
					; get b_0
					compute_b_proc cx , m , points_addr
 00000049  66| 41			inc cx
					;ｆ(x)＝ｃ0 ＋ ｃ1(x - x_0) ＋ ｃ2(x - x_0)(x - x_1)＋ ・・・ ＋ ｃn(x - x_0)(x - x_1)・・・(x - x_n-1）

 0000004B			get_next_b_n: ; where n > 0
 0000004B  8B 5D 08			mov ebx , points_addr
 0000004E  66| BA 0000			mov dx , 0

					compute_b_proc cx , m , points_addr 
 0000006F  D9 05 00000018 R		fld  first ; always 1 for first multiply
					
 00000075			for_independent:
					; (x - x_0)
 00000075  8B 03			mov eax , [ebx]
 00000077  A3 00000010 R		mov float , eax

 0000007C  D9 05 00000014 R		fld REAL4 PTR x_cordinate
 00000082  D9 05 00000010 R		fld float

 00000088  DE E9			fsub
 0000008A  DE C9			fmul

 0000008C  83 C3 08			add ebx , 8
 0000008F  66| 42			inc dx

 00000091  66| 3B D1			cmp dx , cx
 00000094  74 02			je finish

 00000096  EB DD			jmp for_independent
 00000098			finish:

 00000098  DE C9			fmul
 0000009A  DE C1			fadd
 0000009C  66| 41			inc cx
 0000009E  66| 3B 4D 0C			cmp cx , degree
 000000A2  7E A7			jle get_next_b_n

 000000A4			DONE:

 000000A4  8B E5			mov esp , ebp
 000000A6  5D				pop ebp
 000000A7  C2 0004			ret	4
 000000AA			interpolate ENDP

				END 
Microsoft (R) Macro Assembler Version 6.15.8803		    11/06/18 18:17:13
interpolate.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atof . . . . . . . . . . . . . .	Proc
atoi . . . . . . . . . . . . . .	Proc
compute_b_proc . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
ftoa . . . . . . . . . . . . . .	Proc
inputD . . . . . . . . . . . . .	Proc
inputW . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
itoa . . . . . . . . . . . . . .	Proc
outputD  . . . . . . . . . . . .	Proc
outputW  . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
print_points . . . . . . . . . .	Proc
sort_points  . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 0000001E DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000AA DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

interpolate  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AA Public
  for_b_0  . . . . . . . . . . .	L Near	 0000002C _TEXT	
  get_next_b_n . . . . . . . . .	L Near	 0000004B _TEXT	
  for_independent  . . . . . . .	L Near	 00000075 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000098 _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 000000A4 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atof_proc  . . . . . . . . . . .	L Near	 00000000 FLAT	External
atoiproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
carriage . . . . . . . . . . . .	Byte	 00000000 _DATA	
compute_b  . . . . . . . . . . .	L Near	 00000000 FLAT	External
degree . . . . . . . . . . . . .	Text   	 [ebp + 12]
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
first  . . . . . . . . . . . . .	DWord	 00000018 _DATA	
float  . . . . . . . . . . . . .	DWord	 00000010 _DATA	
ftoa_proc  . . . . . . . . . . .	L Near	 00000000 FLAT	External
inproc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
itoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
m  . . . . . . . . . . . . . . .	Word	 0000001C _DATA	
outproc  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
points_addr  . . . . . . . . . .	Text   	 [ebp + 8]
print_points_proc  . . . . . . .	L Near	 00000000 FLAT	External
sort_points_proc . . . . . . . .	L Near	 00000000 FLAT	External
text . . . . . . . . . . . . . .	Byte	 00000003 _DATA	
x_cordinate  . . . . . . . . . .	DWord	 00000014 _DATA	

	   0 Warnings
	   0 Errors
